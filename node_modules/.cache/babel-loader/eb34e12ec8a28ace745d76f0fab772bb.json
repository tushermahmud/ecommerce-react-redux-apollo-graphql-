{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyBMXiw7fufExjp59eBDBMI8iHhMeAJtnbc\",\n  authDomain: \"ecommerce-3ad24.firebaseapp.com\",\n  databaseURL: \"https://ecommerce-3ad24.firebaseio.com\",\n  projectId: \"ecommerce-3ad24\",\n  storageBucket: \"ecommerce-3ad24.appspot.com\",\n  messagingSenderId: \"539395544447\",\n  appId: \"1:539395544447:web:fa21ea1202677fc481b64a\",\n  measurementId: \"G-1VSJJWTTDJ\"\n};\nexport const addCollectionsAndItems = async (connectionKey, objectToDo) => {\n  const connectionRef = firestore.collection(connectionKey);\n  firestore.collection(connectionKey).get().then(snap => {\n    if (snap.size < 1) {\n      const batch = firestore.batch();\n      console.log(objectToDo);\n      objectToDo.forEach(obj => {\n        const newRef = connectionRef.doc();\n        batch.set(newRef, obj);\n      });\n      return batch.commit();\n    } else {\n      return;\n    }\n  });\n};\n\nconst covertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map({\n    title,\n    item\n  });\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalUserInfo) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalUserInfo\n      });\n    } catch (err) {\n      console.log(\"user creation error\", err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["E:/ecommerce/ecommerce/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","addCollectionsAndItems","connectionKey","objectToDo","connectionRef","firestore","collection","get","then","snap","size","batch","console","log","forEach","obj","newRef","doc","set","commit","covertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","item","createUserProfileDocument","userAuth","additionalUserInfo","userRef","uid","snapShot","exists","displayName","email","createdAt","Date","err","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAC;AACTC,EAAAA,MAAM,EAAE,yCADC;AAETC,EAAAA,UAAU,EAAE,iCAFH;AAGTC,EAAAA,WAAW,EAAE,wCAHJ;AAITC,EAAAA,SAAS,EAAE,iBAJF;AAKTC,EAAAA,aAAa,EAAE,6BALN;AAMTC,EAAAA,iBAAiB,EAAE,cANV;AAOTC,EAAAA,KAAK,EAAE,2CAPE;AAQTC,EAAAA,aAAa,EAAE;AARN,CAAb;AAWA,OAAO,MAAMC,sBAAsB,GAAC,OAAOC,aAAP,EAAqBC,UAArB,KAAkC;AAElE,QAAMC,aAAa,GAACC,SAAS,CAACC,UAAV,CAAqBJ,aAArB,CAApB;AACAG,EAAAA,SAAS,CAACC,UAAV,CAAqBJ,aAArB,EAAoCK,GAApC,GAA0CC,IAA1C,CAA+CC,IAAI,IAAI;AACnD,QAAGA,IAAI,CAACC,IAAL,GAAU,CAAb,EAAe;AACX,YAAMC,KAAK,GAAGN,SAAS,CAACM,KAAV,EAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACAA,MAAAA,UAAU,CAACW,OAAX,CAAmBC,GAAG,IAAE;AACpB,cAAMC,MAAM,GAACZ,aAAa,CAACa,GAAd,EAAb;AACAN,QAAAA,KAAK,CAACO,GAAN,CAAUF,MAAV,EAAiBD,GAAjB;AACH,OAHD;AAIA,aAAOJ,KAAK,CAACQ,MAAN,EAAP;AACH,KARD,MAQK;AACD;AACH;AACJ,GAZD;AAcH,CAjBM;;AAkBP,MAAMC,6BAA6B,GAAEC,WAAD,IAAe;AAC/C,QAAMC,qBAAqB,GAACD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqB;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAArB,CAA5B;AACH,CAFD;;AAGA,OAAO,MAAMC,yBAAyB,GAAC,OAAOC,QAAP,EAAgBC,kBAAhB,KAAqC;AACxE,MAAG,CAACD,QAAJ,EAAc;AACd,QAAME,OAAO,GAACzB,SAAS,CAACY,GAAV,CAAe,SAAQW,QAAQ,CAACG,GAAI,EAApC,CAAd;AACA,QAAMC,QAAQ,GAAC,MAAMF,OAAO,CAACvB,GAAR,EAArB;;AACA,MAAG,CAACyB,QAAQ,CAACC,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAoBP,QAA1B;AACA,UAAMQ,SAAS,GAAC,IAAIC,IAAJ,EAAhB;;AACA,QAAG;AACC,YAAMP,OAAO,CAACZ,GAAR,CAAY;AACdgB,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGP;AAJW,OAAZ,CAAN;AAOH,KARD,CAQC,OAAOS,GAAP,EAAY;AACT1B,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCyB,GAAG,CAACC,OAAtC;AACH;AACJ;;AACD,SAAOT,OAAP;AACH,CApBM;AAqBPvC,QAAQ,CAACiD,aAAT,CAAuBhD,MAAvB;AACA,OAAO,MAAMiD,IAAI,GAAClD,QAAQ,CAACkD,IAAT,EAAX;AACP,OAAO,MAAMpC,SAAS,GAACd,QAAQ,CAACc,SAAT,EAAhB;AACP,MAAMqC,QAAQ,GAAC,IAAInD,QAAQ,CAACkD,IAAT,CAAcE,kBAAlB,EAAf;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAC;AAAR,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAC,MAAIL,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA3B;AACP,eAAenD,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config={\r\n    apiKey: \"AIzaSyBMXiw7fufExjp59eBDBMI8iHhMeAJtnbc\",\r\n    authDomain: \"ecommerce-3ad24.firebaseapp.com\",\r\n    databaseURL: \"https://ecommerce-3ad24.firebaseio.com\",\r\n    projectId: \"ecommerce-3ad24\",\r\n    storageBucket: \"ecommerce-3ad24.appspot.com\",\r\n    messagingSenderId: \"539395544447\",\r\n    appId: \"1:539395544447:web:fa21ea1202677fc481b64a\",\r\n    measurementId: \"G-1VSJJWTTDJ\"\r\n};\r\n\r\nexport const addCollectionsAndItems=async (connectionKey,objectToDo)=>{\r\n\r\n    const connectionRef=firestore.collection(connectionKey);\r\n    firestore.collection(connectionKey).get().then(snap => {\r\n        if(snap.size<1){\r\n            const batch = firestore.batch();\r\n            console.log(objectToDo);\r\n            objectToDo.forEach(obj=>{\r\n                const newRef=connectionRef.doc();\r\n                batch.set(newRef,obj);\r\n            })\r\n            return batch.commit();\r\n        }else{\r\n            return;\r\n        }\r\n    });\r\n\r\n}\r\nconst covertCollectionSnapshotToMap=(collections)=>{\r\n    const transformedCollection=collections.docs.map({title,item})\r\n}\r\nexport const createUserProfileDocument=async (userAuth,additionalUserInfo)=>{\r\n    if(!userAuth) return;\r\n    const userRef=firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot=await userRef.get();\r\n    if(!snapShot.exists){\r\n        const {displayName,email}=userAuth;\r\n        const createdAt=new Date();\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalUserInfo\r\n            })\r\n            \r\n        }catch (err) {\r\n            console.log(\"user creation error\",err.message);\r\n        }\r\n    }\r\n    return userRef;\r\n}\r\nfirebase.initializeApp(config);\r\nexport const auth=firebase.auth();\r\nexport const firestore=firebase.firestore();\r\nconst provider=new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt:'select_account'});\r\nexport const signInWithGoogle=()=>auth.signInWithPopup(provider);\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}